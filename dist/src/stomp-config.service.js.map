{"version":3,"sources":["../../src/stomp-config.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,UAAE,EAAU,MAAM,eAAA,CAAgB;AAGzC,OAAO,EAAA,UAAE,EAAU,MAAM,iBAAA,CAAkB;AAE3C;;;;;;;;;GASG;AAEH;IAEE,kBAAkB;IAClB;IACA,CAAC;IAGD;;OAEG;IACI,gCAAG,GAAV;QACE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAOH,yBAAC;AAAD,CAnBA,AAmBC;;AANM,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"stomp-config.service.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {StompConfig} from './stomp.config';\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * An injected class which grabs the application\n * config variables (e.g. STOMP credentials)\n * for the user application.\n *\n * You will need to subclass this and pass an instance using Dependency Injection\n * mechanism of Angular. See README and samples for ideas on how to implement.\n *\n * @type StompConfigService\n */\n\nexport class StompConfigService {\n\n  /** Constructor */\n  constructor() {\n  }\n\n\n  /** Implement this method in your derived class.\n   * See README and samples for ideas on how to implement.\n   */\n  public get(): Observable<StompConfig> {\n    return Observable.of({});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}